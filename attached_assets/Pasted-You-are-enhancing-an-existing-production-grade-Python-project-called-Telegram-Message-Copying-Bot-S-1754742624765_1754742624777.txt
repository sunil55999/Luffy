You are enhancing an existing production-grade Python project called "Telegram Message Copying Bot System" that uses:

- Telethon (user session) for reading messages from source channels
- Multiple Telegram Bot API tokens (2–3 worker/admin bots) for sending messages to destination private channels
- SQLite database for managing pairs, bot tokens, and mappings
- An admin bot for receiving management commands
- Multiple bot tokens assigned to different destination channels (60–70 pairs total)

Currently, the bot can forward messages, but it cannot mass-kick users or manage timed subscriptions.

---

### New Features to Implement

#### 1. `/kickall` Command (Mass Kick)
- Admin command in `bot_manager.py`
- Syntax: `/kickall <user_id|@username> [duration_seconds]`
- Should:
  - Resolve user_id from username using Telethon if needed
  - Fetch **all unique destination_chat_id** from `pairs` table in SQLite
  - For each destination channel:
    - Find the `bot_token_id` assigned in `pairs`
    - Fetch the corresponding bot token from `bot_tokens` table
    - Call Bot API `banChatMember` to remove the user from that channel
    - If `duration_seconds` is given, wait and then call `unbanChatMember`
  - Return a success message with number of channels kicked from

#### 2. `/unbanall` Command
- Admin command in `bot_manager.py`
- Syntax: `/unbanall <user_id|@username>`
- Should:
  - Same logic as `/kickall` but only calls `unbanChatMember` for all channels

#### 3. Subscription Tracking Table
- New SQLite table: `user_subscriptions`
  ```sql
  CREATE TABLE IF NOT EXISTS user_subscriptions (
      user_id INTEGER NOT NULL PRIMARY KEY,
      expires_at TEXT NOT NULL,
      added_by INTEGER,
      notes TEXT
  );
Stores a global expiry date for each user (not per channel).

4. /addsub Command
Syntax: /addsub <user_id|@username> <days>

Should:

Resolve user_id if username given

Insert or update subscription with expires_at = now + days

Store added_by as the admin issuing the command

5. /renewsub Command
Syntax: /renewsub <user_id|@username> <days>

Should:

Extend expiry date by days for that user

Error if no existing subscription

6. /listsubs Command
Shows active subscriptions sorted by expiry date

7. Background Task for Auto-Expiry Kicking
Every hour:

Query user_subscriptions for expired expires_at

For each expired user:

Call the same logic as /kickall

Remove the user from user_subscriptions

Should run inside the bot’s async loop (like subscription_checker())

8. Optional Reminder Feature
3 days before expiry, send a reminder to the user (if bot can DM) or log to admin

Technical Requirements
The commands must check _is_admin() before executing

The kick/unban logic must reuse the multi-bot mapping in the pairs table:

Each destination chat can have a different bot token

Use correct bot token for each channel

Make no breaking changes to the existing message forwarding logic

Use async/await where the rest of the code uses it

Keep database operations inside database.py (add helper methods)

Follow the same logging style already in the project

Deliverables
Updated database.py with:

get_all_pairs()

get_bot_token_by_id(token_id)

add_or_update_subscription(user_id, expires_at, added_by)

renew_subscription(user_id, days)

get_expired_subscriptions(now)

delete_subscription(user_id)

get_active_subscriptions()

Updated bot_manager.py with:

/kickall, /unbanall, /addsub, /renewsub, /listsubs commands

Background task for checking expiries

Code should be production-ready and tested for:

Kicking by numeric ID or username

Multiple bot tokens

Expiry-based automatic kicking