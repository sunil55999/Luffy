You are analyzing a Python project called "Telegram Message Copying Bot System".

Goal: Diagnose why the header/footer removal feature in filters.py is not currently functional. This feature should remove text matching configured regex patterns from the start (header) or end (footer) of a forwarded message, while preserving the original message formatting and entities.

---

### Steps for Diagnosis

1. Locate in `filters.py` the functions or methods responsible for:
   - Applying `header_regex` and `footer_regex`
   - Preserving formatting and entities
   - Returning the transformed text

2. Trace how these regex patterns are loaded from:
   - Global settings
   - `pairs` table â†’ `filters` column (JSON)
   - Admin commands `/headerregex` and `/footerregex`

3. Identify the point in the message flow where these regex transformations are applied:
   - Start from `message_processor.py`
   - Follow calls to the filtering pipeline
   - See if the header/footer removal code is executed before sending messages

4. Check for these possible causes of failure:
   - The `header_regex` or `footer_regex` value is `None` or empty due to config not loading
   - The regex is never applied because the function is skipped in the pipeline
   - Incorrect regex flags or boundaries not matching actual message content
   - Entity-preserving logic breaks or skips regex when message has formatting (bold/italic/links)
   - Transformed text is overwritten later in the pipeline by the unfiltered version

5. Confirm if the filtered text returned by `filters.py` is:
   - Correctly processed with regex applied
   - Passed forward to the bot sending function without losing entity data

6. Output a detailed **Root Cause Report**:
   - Where in the code the header/footer regex stops working
   - Whether the regex runs at all
   - Whether the formatting preservation logic interferes
   - Any misalignment between stored regex patterns and the patterns used during filtering

---

Important:
- Do not make code changes yet.
- Only output the diagnostic analysis and the exact location(s) in the code where the issue occurs.
- The output should clearly tell us WHY the feature is currently non-functional and WHAT needs to be fixed.

Once diagnosis is complete, we will then proceed with the fix.